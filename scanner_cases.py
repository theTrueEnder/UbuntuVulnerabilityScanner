'''
Created by Kai Delsing
1/25/2021

UBUNTU VULNERABILITY SCANNER V1.0
Requires root permissions to run
'''
import sys
import subprocess
class cases():
    def __init__(self, suggest=False, fix=False):
        self.suggest = suggest
        self.fix = fix

    def run_all():
        cases.is_sudo_installed()
        cases.boot_config_perms()
        cases.enable_aslr()
        
    def formatOutput(self, output):
        lst = []
        for i in output:
            out = str(i)
            out = out[2:len(out)-5]
            lst.append(str(out))
        return lst

    def runBashLine(self, cmd):
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
        return self.formatOutput(process.communicate())

    def test_cmd(self, cmd):
        out, err = self.runBashLine(cmd)
        print('Out:', out)
        print('Err:', err)

    def is_sudo_installed(self):
        audit = 'dpkg -s sudo'
        audit_check = 'Package: sudo' + '\\n' + 'Status: install ok installed'
        remed = 'apt install sudo'
        out, err = self.runBashLine(audit)
        if err:
            print("Error in: is_sudo_installed\n\t", err)
        elif out != audit_check:
            print('Vulnerability: sudo not installed')
            if self.suggest:
                print('Suggested bash command:\n\t$', remed)
                print('See page 81 of the CIS Ubuntu Manual for more information')
            if self.fix:
                out2, err2 = self.runBashLine(remed)
                if len(err2) > 0 and err2[2:9] != 'WARNING':
                    print('Error resolving vulnerability', '\n\t', err2)
                else:
                    print('Vulnerability resolved\n\t')
        else:
            print('sudo correctly configured')

    def boot_config_perms(self):
        audit = 'stat /boot/grub/grub.cfg'
        audit_check = 'Uid: (    0/    root)   Gid: (    0/    root)'
        remed = 'chown root:root /boot/grub/grub.cfg && chmod og-rwx /boot/grub/grub.cfg'
        out, err = self.runBashLine(audit)
        if err:
            print("Error in: boot_config_perms\n\t", err)
        elif audit_check not in out:
            print('Vulnerability: Dangerous Bootloader Config Permissions')
            if self.suggest:
                print('Suggested bash command:\n\t$', remed)
                print('See page 91 of the CIS Ubuntu Manual for more information')
            if self.fix:
                out2, err2 = self.runBashLine(remed)
                if len(err2) > 0 and err2[2:9] != 'WARNING':
                    print('Error resolving vulnerability', err2)
                else:
                    print('Vulnerability resolved\n\t')
        else:
            print('Bootloader config permissions correctly configured')

    #audit_check fails
    def root_pass(self):
        audit = 'sudo grep ^root:[*\!]: /etc/shadow'
        audit_check = ''
        remed = 'passwd root'
        out, err = self.runBashLine(audit)
        if err:
            print("Error in: root_pass\n\t", err)
        elif out != audit_check:
            print(out)
            print('Vulnerability: root password not configured')
            if self.suggest:
                print('Suggested bash command:\n\t$', remed)
                print('See page 96 of the CIS Ubuntu Manual for more information')
            if self.fix:
                out2, err2 = self.runBashLine(remed)
                if len(err2) > 0 and err2[2:9] != 'WARNING':
                    print('Error resolving vulnerability', err2)
                else:
                    print('Vulnerability resolved\n\t')
        else:
            print('Root password correctly configured')

    def enable_aslr(self):
        audit = 'sysctl kernel.randomize_va_space'
        audit_check = 'kernel.randomize_va_space = 2'
        remed = 'sysctl -w kernel.randomize_va_space=2'
        out, err = self.runBashLine(audit)
        if err:
            print("Error in: enable_aslr\n\t", err)
        elif out != audit_check:
            print('Vulnerability: ASLR not enabled')
            print(out)
            if self.suggest:
                print('Suggested bash command:\n\t$', remed)
                print('See page 101 of the CIS Ubuntu Manual for more information')
            if self.fix:
                out2, err2 = self.runBashLine(remed)
                if len(err2) > 0 and err2[2:9] != 'WARNING':
                    print('Error resolving vulnerability', err2)
                else:
                    print('Vulnerability resolved\n\t')
        else:
            print('ASLR correctly configured')




    def template(self):
        audit = ''
        audit_check = ''
        remed = ''
        out, err = self.runBashLine(audit)
        if err:
            print("Error in: <>\n\t", err)
        elif out != audit_check:
            print('Vulnerability: <>')
            if self.suggest:
                print('Suggested bash command:\n\t$', remed)
                print('See page <> of the CIS Ubuntu Manual for more information')
            if self.fix:
                out2, err2 = self.runBashLine(remed)
                if len(err2) > 0 and err2[2:9] != 'WARNING':
                    print('Error resolving vulnerability', err2)
                else:
                    print('Vulnerability resolved\n\t')
        else:
            print('<> correctly configured')

def str2bool(v):
  return v.lower() in ("yes", "true", "t", "1")

'''
suggest = str2bool(sys.argv[1])
fix = str2bool(sys.argv[2])
print('Suggest =', suggest)
print('Fix =', fix, '\n')
scan = cases(suggest, fix)

#scan = cases(suggest=False, fix=False)
#scan.is_sudo_installed()
#scan.boot_config_perms()
#AUDIT_CHECK FAILS scan.root_pass()
scan.enable_aslr()
'''
#scan.test_cmd("sudo grep -Ei '^\s*Defaults\s+logfile=\S+' /etc/sudoers /etc/sudoers.d/*")

'''
import difflib
d = difflib.Differ()
diff = d.compare(out, audit_check)
print(''.join(diff))
'''
